/*
 * puggedcode.cpp
 *
 * Created: 3/28/2020 10:14:26 AM
 * Author : ifkno
 */ 

/**
 * If using pure virtual member functions and a toolchain that does not compile with libstdc++, 
 * such as avr-gcc, then __cxa_pure_virtual() must be defined.
 * Undefined pure virtual functions can get called during object construction/destruction. 
 * If that happens, __cxa_pure_virtual() gets called to report the error.
 */
extern "C" void __cxa_pure_virtual() { 
	while (true); // safe predictable loud error
}

#include "uart_device.h"
#include "tiny_catch.h"

#include "aes_functions.h"

#include <avr/eeprom.h>

SET_VERSION(0x11);  // version 1.1
SET_FILE_ID(0x01);  // unique file id 1

using namespace avr_aes;

//#define MAKE_KEY
//#define TEST_KEY
//#define TEST_ECB

int main() { 
	
	auto& uart = singleton::uart_device::instance();
	
#ifdef MAKE_KEY	

	//key_t key = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	//key_t key = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
	//key_t key = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
	key_t key = {0x69, 0x20, 0xe2, 0x99, 0xa5, 0x20, 0x2a, 0x41, 0x74, 0x6d, 0x65, 0x6c, 0x41, 0x56, 0x52, 0x2a};
	//key_t key = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
		
	uart.write_hex_block(key, 16, 4);

	expanded_key_t xkey;
	
	make_expanded_key(key, xkey);
	
	eeprom_write_block((const void*)&xkey, (void*)0, 176);
	
#elif defined(TEST_KEY)

	key_t key = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
	
	expanded_key_t ekey = {
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0xd6, 0xaa, 0x74, 0xfd, 0xd2, 0xaf, 0x72, 0xfa, 0xda, 0xa6, 0x78, 0xf1, 0xd6, 0xab, 0x76, 0xfe,
		0xb6, 0x92, 0xcf, 0x0b, 0x64, 0x3d, 0xbd, 0xf1, 0xbe, 0x9b, 0xc5, 0x00, 0x68, 0x30, 0xb3, 0xfe,
		0xb6, 0xff, 0x74, 0x4e, 0xd2, 0xc2, 0xc9, 0xbf, 0x6c, 0x59, 0x0c, 0xbf, 0x04, 0x69, 0xbf, 0x41,
		0x47, 0xf7, 0xf7, 0xbc, 0x95, 0x35, 0x3e, 0x03, 0xf9, 0x6c, 0x32, 0xbc, 0xfd, 0x05, 0x8d, 0xfd,
		0x3c, 0xaa, 0xa3, 0xe8, 0xa9, 0x9f, 0x9d, 0xeb, 0x50, 0xf3, 0xaf, 0x57, 0xad, 0xf6, 0x22, 0xaa,
		0x5e, 0x39, 0x0f, 0x7d, 0xf7, 0xa6, 0x92, 0x96, 0xa7, 0x55, 0x3d, 0xc1, 0x0a, 0xa3, 0x1f, 0x6b,
		0x14, 0xf9, 0x70, 0x1a, 0xe3, 0x5f, 0xe2, 0x8c, 0x44, 0x0a, 0xdf, 0x4d, 0x4e, 0xa9, 0xc0, 0x26,
		0x47, 0x43, 0x87, 0x35, 0xa4, 0x1c, 0x65, 0xb9, 0xe0, 0x16, 0xba, 0xf4, 0xae, 0xbf, 0x7a, 0xd2,
		0x54, 0x99, 0x32, 0xd1, 0xf0, 0x85, 0x57, 0x68, 0x10, 0x93, 0xed, 0x9c, 0xbe, 0x2c, 0x97, 0x4e,
		0x13, 0x11, 0x1d, 0x7f, 0xe3, 0x94, 0x4a, 0x17, 0xf3, 0x07, 0xa7, 0x8b, 0x4d, 0x2b, 0x30, 0xc5
	};
	
	expanded_key_t xkey;
	
	make_expanded_key(key, xkey);
	
	for(uint8_t i{0}; i < 176; ++i) {
		CHECK(ekey[i] == xkey[i]);
	}
	
	REPORT("jst");
	
#elif defined(TEST_ECB)

	nist_block_t out = {0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97};
							
	nist_block_t in  = {0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a};

	expanded_key_t ekey;
	
	eeprom_read_block((void*)&ekey, (const void*)0, 176);	// read in expanded key from eeprom
	
	encrypt(ekey, in);
	
	for(uint8_t i{0}; i < 16; ++i) {
		CHECK(in[i] == out[i]);
	}
	
	REPORT("jst");

#else

	expanded_key_t ekey;
	
	eeprom_read_block((void*)&ekey, (const void*)0, sizeof(expanded_key_t));
	
	uart.write_hex_block(ekey, sizeof(expanded_key_t), 16);
	
	nist_block_t block;
	
	while(true) {
		
		uart.read_block(block, sizeof(nist_block_t));
		encrypt(ekey, block);
		uart.write_hex_block(block, sizeof(nist_block_t), 16);
		
	}
	
#endif
		
}